#!/usr/bin/env bash
# Snapshot/restore current kitty session to sessions/snapshot.session
set -euo pipefail

CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}/kitty
SESS_DIR="$CONFIG_DIR/sessions"
OUT_FILE="$SESS_DIR/snapshot.session"
SOCKET=${KITTY_LISTEN_ON:-unix:$HOME/.cache/kitty/kitty-$USER.sock}

usage() {
  cat <<USAGE
Usage: session_snapshot.sh [OPTIONS]

Options:
  --restore         Opens a new OS window using the saved snapshot
  --output FILE     Save to specific session file (default: snapshot.session)
  --startup         Save as startup session (saves to last.session)
  -h, --help        Show this help

Without args, saves the current session to: $OUT_FILE
USAGE
}

mkdir -p "$SESS_DIR"

# Parse arguments
RESTORE=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage; exit 0
      ;;
    --restore)
      RESTORE=true
      shift
      ;;
    --output)
      OUT_FILE="$SESS_DIR/$2"
      shift 2
      ;;
    --startup)
      OUT_FILE="$SESS_DIR/last.session"
      shift
      ;;
    *)
      echo "Unknown option: $1" >&2
      usage; exit 1
      ;;
  esac
done

if $RESTORE; then
  if [[ ! -f "$OUT_FILE" ]]; then
    echo "No snapshot found at $OUT_FILE" >&2
    exit 1
  fi
  # Launch using kitty session file in a new OS window
  exec kitty @ --to "$SOCKET" launch --type=os-window --title "Restored Session" kitty --session "$OUT_FILE"
fi

# Save snapshot
TMP_JSON=$(mktemp)
trap 'rm -f "$TMP_JSON"' EXIT

if ! kitty @ --to "$SOCKET" ls >"$TMP_JSON" 2>/dev/null; then
  echo "Failed to query kitty; is a kitty instance running and remote control enabled?" >&2
  exit 1
fi

# Generate a minimal session file: tabs + working dirs
python3 - "$TMP_JSON" "$OUT_FILE" <<'PY'
import json, os, sys

src = sys.argv[1]
dst = sys.argv[2]
data = json.load(open(src))

lines = ["# Snapshot generated by session_snapshot.sh"]

def safe_title(title: str) -> str:
    return title.replace("\n", " ")[:80]

# Iterate all OS windows and their tabs
for osw in data.get('os_windows', []):
    for i, tab in enumerate(osw.get('tabs', [])):
        title = tab.get('title') or f"Tab {i+1}"
        lines.append(f"new_tab {safe_title(title)}")
        # Prefer the active window's cwd, else the first window's cwd
        wins = tab.get('windows', [])
        win = next((w for w in wins if w.get('is_focused')), wins[0] if wins else None)
        cwd = None
        if win:
            # cwd may be under 'cwd' or 'child'->'cwd'
            cwd = win.get('cwd') or (win.get('child') or {}).get('cwd')
        if cwd:
            lines.append(f"cd {cwd}")
        lines.append("launch bash")
        lines.append("")

# Focus the first tab at end
lines.append("goto_tab 1")

with open(dst, 'w') as f:
    f.write("\n".join(lines) + "\n")

print(f"Wrote {dst}")
PY

echo "Snapshot saved to $OUT_FILE"

